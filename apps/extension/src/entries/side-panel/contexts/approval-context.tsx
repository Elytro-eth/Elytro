import { createContext, useContext, useState } from 'react';
import { useWallet } from '@/contexts/wallet';
import { useInterval } from 'usehooks-ts';
import { toast } from '@/hooks/use-toast';

type IApprovalContext = {
  approval: Nullable<TApprovalInfo>;
  resolve: (data?: unknown) => Promise<void>;
  reject: (e?: Error) => Promise<void>;
};

const ApprovalContext = createContext<IApprovalContext>({
  approval: null,
  resolve: async () => {},
  reject: async () => {},
});

export const ApprovalProvider = ({
  children,
}: {
  children: React.ReactNode;
}) => {
  const wallet = useWallet();
  const [approval, setApproval] = useState<Nullable<TApprovalInfo>>(
    null
    //   {
    //   type: 'SendTx',
    //   id: 'dadd6e49-13fe-4483-9b90-d6cea3d3c745',
    //   data: {
    //     dApp: {
    //       origin: 'https://app.uniswap.org',
    //       name: 'Buy, sell & trade Ethereum and other top tokens on Uniswap',
    //       icon: 'https://app.uniswap.org/favicon.png',
    //     },
    //     tx: [
    //       {
    //         chainId: '0xaa36a7',
    //         gas: '0x3a642',
    //         maxFeePerGas: '0x53863eeca',
    //         maxPriorityFeePerGas: '0xd6185bda',
    //         value: '0xaa87bee538000',
    //         from: '0x79e9283d14e706f9b31631614f8416d5c91d3fd0',
    //         to: '0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad',
    //         data: '0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000006729e95500000000000000000000000000000000000000000000000000000000000000040b000604000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000aa87bee53800000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000aa87bee538000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bfff9976782d46cc05630d1f6ebab18b2324d6b14000bb81c7d4b196cb0c7b01d743fbc6116a902379c723800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000001c7d4b196cb0c7b01d743fbc6116a902379c7238000000000000000000000000e49acc3b16c097ec88dc9352ce4cd57ab7e35b95000000000000000000000000000000000000000000000000000000000000001900000000000000000000000000000000000000000000000000000000000000600000000000000000000000001c7d4b196cb0c7b01d743fbc6116a902379c723800000000000000000000000079e9283d14e706f9b31631614f8416d5c91d3fd00000000000000000000000000000000000000000000000000000000002a3194d0c',
    //       },
    //     ],
    //   },
    //   winId: 1753414646,
    // }
  );

  const getCurrentApproval = async () => {
    const approval = await wallet.getCurrentApproval();
    setApproval(approval);
  };

  const resolve = async (data: unknown) => {
    if (!approval) {
      return;
    }
    await wallet.resolveApproval(approval.id, data);
  };

  const reject = async (e?: Error) => {
    if (!approval) {
      return;
    }
    await wallet.rejectApproval(approval.id);

    toast({
      title: 'Rejected',
      description: e ? e.message : 'The approval request has been rejected',
    });
  };

  // todo: optimize it
  useInterval(() => {
    if (!approval) {
      getCurrentApproval();
    }
  }, 1000);

  return (
    <ApprovalContext.Provider value={{ approval, resolve, reject }}>
      {children}
    </ApprovalContext.Provider>
  );
};

export const useApproval = () => {
  return useContext(ApprovalContext);
};
